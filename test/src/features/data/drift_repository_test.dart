import 'package:flutter_test/flutter_test.dart'; // Direct import for setUp, tearDown, group
import 'package:flutter_test/flutter_test.dart' as ft; // Alias for test, expect, isNotNull, isNull, isTrue
import 'package:drift/native.dart'; // Correct import for NativeDatabase
import 'package:todo_app/src/features/data/database/app_database.dart';
import 'package:todo_app/src/features/data/drift_repository.dart';
import 'package:todo_app/src/features/domain/todo_model.dart';

void main() {
  late AppDatabase db;
  late DriftRepository driftRepository;

  setUp(() async {
    // Use an in-memory database for testing
    db = AppDatabase.forTesting(NativeDatabase.memory());
    driftRepository = DriftRepository(db);
  });

  tearDown(() async {
    await db.close();
  });

  group('DriftRepository', () {
    ft.test('addTodo adds a new todo', () async {
      final todo = Todo(
        id: 0, // ID will be auto-generated by Drift
        name: 'Test Todo',
        description: 'Description for test todo',
        deadline: DateTime.now().add(const Duration(days: 1)),
        isCompleted: false,
      );

      await driftRepository.addTodo(todo);

      final result = await driftRepository.getTodo(1); // Assuming first ID is 1
      ft.expect(result, ft.isNotNull);
      ft.expect(result!.name, 'Test Todo');
      ft.expect(result.isCompleted, false);
    });

    ft.test('getTodo returns null if todo does not exist', () async {
      final result = await driftRepository.getTodo(999);
      ft.expect(result, ft.isNull);
    });

    ft.test('getAllTodo returns all todos', () async {
      final todo1 = Todo(
        id: 0,
        name: 'Todo 1',
        description: 'Desc 1',
        deadline: DateTime.now().add(const Duration(days: 1)),
        isCompleted: false,
      );
      final todo2 = Todo(
        id: 0,
        name: 'Todo 2',
        description: 'Desc 2',
        deadline: DateTime.now().add(const Duration(days: 2)),
        isCompleted: true,
      );
      await driftRepository.addTodo(todo1);
      await driftRepository.addTodo(todo2);

      final result = await driftRepository.getAllTodo();

      ft.expect(result.length, 2);
      ft.expect(result.any((t) => t.name == 'Todo 1'), ft.isTrue);
      ft.expect(result.any((t) => t.name == 'Todo 2'), ft.isTrue);
    });

    ft.test('deleteTodo removes a todo', () async {
      final todo = Todo(
        id: 0,
        name: 'Delete Me',
        description: 'Should be deleted',
        deadline: DateTime.now().add(const Duration(days: 1)),
        isCompleted: false,
      );
      await driftRepository.addTodo(todo);
      final addedTodo = await driftRepository.getTodo(1);
      ft.expect(addedTodo, ft.isNotNull);

      await driftRepository.deleteTodo(addedTodo!.id);

      final result = await driftRepository.getTodo(addedTodo.id);
      ft.expect(result, ft.isNull);
    });

    ft.test('editTodo updates an existing todo', () async {
      final todo = Todo(
        id: 0,
        name: 'Original Name',
        description: 'Original Desc',
        deadline: DateTime.now().add(const Duration(days: 1)),
        isCompleted: false,
      );
      await driftRepository.addTodo(todo);
      final addedTodo = await driftRepository.getTodo(1);

      final updatedTodo = addedTodo!.copyWith(
        name: 'Updated Name',
        description: 'Updated Desc',
        isCompleted: true,
      );

      await driftRepository.editTodo(updatedTodo);

      final result = await driftRepository.getTodo(addedTodo.id);
      ft.expect(result, ft.isNotNull);
      ft.expect(result!.name, 'Updated Name');
      ft.expect(result.description, 'Updated Desc');
      ft.expect(result.isCompleted, true);
    });

    ft.test('toggleCompletion toggles the completion status of a todo', () async {
      final todo = Todo(
        id: 0,
        name: 'Toggle Test',
        description: 'Toggle description',
        deadline: DateTime.now().add(const Duration(days: 1)),
        isCompleted: false,
      );
      await driftRepository.addTodo(todo);
      final addedTodo = await driftRepository.getTodo(1);
      ft.expect(addedTodo!.isCompleted, false);

      await driftRepository.toggleCompletion(addedTodo);

      final toggledOnce = await driftRepository.getTodo(addedTodo.id);
      ft.expect(toggledOnce!.isCompleted, true);

      await driftRepository.toggleCompletion(toggledOnce);

      final toggledTwice = await driftRepository.getTodo(addedTodo.id);
      ft.expect(toggledTwice!.isCompleted, false);
    });
  });
}